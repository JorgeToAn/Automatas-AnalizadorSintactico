
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.proyecto;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\255\000\002\002\006\000\002\002\004\000\002\002" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\010\005\000\002\010\004" +
    "\000\002\010\004\000\002\007\005\000\002\007\005\000" +
    "\002\007\004\000\002\007\004\000\002\007\003\000\002" +
    "\007\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\007\000\002\011\007" +
    "\000\002\011\007\000\002\011\007\000\002\012\003\000" +
    "\002\012\005\000\002\012\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\003\000\002\013" +
    "\006\000\002\013\005\000\002\014\004\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\005" +
    "\000\002\017\004\000\002\020\003\000\002\020\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\003\000\002" +
    "\024\003\000\002\030\006\000\002\030\010\000\002\025" +
    "\010\000\002\025\012\000\002\027\003\000\002\027\003" +
    "\000\002\055\006\000\002\055\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\031\005\000\002" +
    "\031\005\000\002\032\007\000\002\032\003\000\002\033" +
    "\003\000\002\033\004\000\002\033\003\000\002\034\004" +
    "\000\002\034\003\000\002\034\003\000\002\035\012\000" +
    "\002\035\011\000\002\036\007\000\002\036\003\000\002" +
    "\037\003\000\002\037\004\000\002\037\003\000\002\040" +
    "\004\000\002\040\003\000\002\040\003\000\002\041\005" +
    "\000\002\042\005\000\002\042\006\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\044\005" +
    "\000\002\044\003\000\002\047\007\000\002\047\003\000" +
    "\002\045\003\000\002\045\004\000\002\046\004\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\050\005\000\002\050\003\000\002\051\011" +
    "\000\002\051\005\000\002\051\012\000\002\051\006\000" +
    "\002\051\005\000\002\051\006\000\002\051\011\000\002" +
    "\051\012\000\002\051\005\000\002\051\006\000\002\051" +
    "\011\000\002\051\011\000\002\052\003\000\002\052\004" +
    "\000\002\053\007\000\002\053\010\000\002\053\004\000" +
    "\002\053\005\000\002\053\006\000\002\053\007\000\002" +
    "\054\003\000\002\054\003\000\002\056\005\000\002\056" +
    "\003\000\002\057\011\000\002\057\005\000\002\057\012" +
    "\000\002\057\006\000\002\057\005\000\002\057\006\000" +
    "\002\057\005\000\002\057\006\000\002\060\003\000\002" +
    "\060\004\000\002\061\003\000\002\061\004\000\002\062" +
    "\003\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\006\003\005\011\006\001\002\000\004\002" +
    "\u0120\001\002\000\004\002\uffff\001\002\000\004\102\u0118" +
    "\001\002\000\006\003\011\004\010\001\002\000\004\102" +
    "\u0110\001\002\000\006\003\uff86\005\uff86\001\002\000\006" +
    "\003\013\005\015\001\002\000\006\003\uff7b\007\uff7b\001" +
    "\002\000\006\003\366\007\367\001\002\000\004\102\016" +
    "\001\002\000\004\006\020\001\002\000\006\003\uff7c\007" +
    "\uff7c\001\002\000\004\052\021\001\002\000\012\013\353" +
    "\027\032\052\030\104\115\001\002\000\012\013\034\027" +
    "\032\031\023\052\030\001\002\000\042\037\073\040\056" +
    "\041\070\042\071\043\065\044\061\052\172\070\053\071" +
    "\057\072\067\073\052\074\066\075\063\076\047\077\054" +
    "\100\060\001\002\000\004\027\162\001\002\000\010\003" +
    "\uff76\006\020\007\uff76\001\002\000\010\003\uff79\006\020" +
    "\007\uff79\001\002\000\014\003\uff6e\006\uff6e\007\uff6e\014" +
    "\uff6e\031\023\001\002\000\004\104\115\001\002\000\014" +
    "\003\uff65\006\uff65\007\uff65\014\uff65\031\uff65\001\002\000" +
    "\042\037\073\040\056\041\070\042\071\043\065\044\061" +
    "\052\064\070\053\071\057\072\067\073\052\074\066\075" +
    "\063\076\047\077\054\100\060\001\002\000\014\003\uff66" +
    "\006\uff66\007\uff66\014\uff66\031\uff66\001\002\000\004\102" +
    "\035\001\002\000\010\027\032\031\023\052\030\001\002" +
    "\000\004\014\043\001\002\000\004\014\040\001\002\000" +
    "\004\102\041\001\002\000\010\003\uff7a\006\020\007\uff7a" +
    "\001\002\000\006\003\uff78\007\uff78\001\002\000\004\102" +
    "\044\001\002\000\010\003\uff74\006\020\007\uff74\001\002" +
    "\000\006\003\uff73\007\uff73\001\002\000\020\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\052\uffbd\001\002" +
    "\000\020\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\052\uffb5\001\002\000\074\002\ufff8\003\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\013\ufff8\014\ufff8\030\ufff8\031\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\041\ufff8\052\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074" +
    "\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\103\ufff8\104\ufff8" +
    "\001\002\000\004\030\100\001\002\000\020\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\052\uffc1\001\002" +
    "\000\020\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\052\uffc4\001\002\000\020\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\052\uffb4\001\002\000\020\037" +
    "\073\040\056\041\070\042\071\043\065\044\061\052\064" +
    "\001\002\000\114\002\ufffd\003\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\013\ufffd\014\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd" +
    "\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd" +
    "\061\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075" +
    "\ufffd\076\ufffd\077\ufffd\100\ufffd\103\ufffd\104\ufffd\105\ufffd" +
    "\001\002\000\020\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\052\uffc3\001\002\000\020\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\052\uffbe\001\002\000" +
    "\074\002\uffb6\003\uffb6\006\uffb6\007\uffb6\010\uffb6\013\uffb6" +
    "\014\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\052\uffb6\070\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077" +
    "\uffb6\100\uffb6\103\uffb6\104\uffb6\001\002\000\074\002\ufff6" +
    "\003\ufff6\006\ufff6\007\ufff6\010\ufff6\013\ufff6\014\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\052\ufff6\070\ufff6\071\ufff6\072" +
    "\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6" +
    "\103\ufff6\104\ufff6\001\002\000\020\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\052\uffc0\001\002\000\074" +
    "\002\uffc6\003\uffc6\006\uffc6\007\uffc6\010\uffc6\013\uffc6\014" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\052\uffc6\070\uffc6\071" +
    "\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6" +
    "\100\uffc6\103\uffc6\104\uffc6\001\002\000\074\002\uffb7\003" +
    "\uffb7\006\uffb7\007\uffb7\010\uffb7\013\uffb7\014\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\052\uffb7\070\uffb7\071\uffb7\072\uffb7" +
    "\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\103" +
    "\uffb7\104\uffb7\001\002\000\020\037\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\052\uffbf\001\002\000\020\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\052\uffc2" +
    "\001\002\000\114\002\ufffc\003\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\013\ufffc\014\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\052" +
    "\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc" +
    "\061\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075" +
    "\ufffc\076\ufffc\077\ufffc\100\ufffc\103\ufffc\104\ufffc\105\ufffc" +
    "\001\002\000\074\002\ufff7\003\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\013\ufff7\014\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\052" +
    "\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7" +
    "\076\ufff7\077\ufff7\100\ufff7\103\ufff7\104\ufff7\001\002\000" +
    "\024\070\053\071\057\072\067\073\052\074\066\075\063" +
    "\076\047\077\054\100\060\001\002\000\114\002\ufffe\003" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\013\ufffe\014\ufffe\030\ufffe" +
    "\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe" +
    "\056\ufffe\057\ufffe\060\ufffe\061\ufffe\070\ufffe\071\ufffe\072" +
    "\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe\077\ufffe\100\ufffe" +
    "\103\ufffe\104\ufffe\105\ufffe\001\002\000\074\002\uffc5\003" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\013\uffc5\014\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\052\uffc5\070\uffc5\071\uffc5\072\uffc5" +
    "\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\103" +
    "\uffc5\104\uffc5\001\002\000\020\037\073\040\056\041\070" +
    "\042\071\043\065\044\061\052\064\001\002\000\052\002" +
    "\uffc8\003\uffc8\006\uffc8\007\uffc8\010\uffc8\013\uffc8\014\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\052\uffc8\103\uffc8\104\uffc8" +
    "\001\002\000\052\002\uffc7\003\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\013\uffc7\014\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\052" +
    "\uffc7\103\uffc7\104\uffc7\001\002\000\026\015\101\016\105" +
    "\017\102\020\111\021\107\022\103\023\104\024\113\025" +
    "\112\026\106\001\002\000\032\002\uff91\003\uff91\004\uff91" +
    "\006\uff91\007\uff91\010\uff91\012\uff91\014\uff91\027\uff91\031" +
    "\uff91\033\uff91\052\uff91\001\002\000\032\002\uff8a\003\uff8a" +
    "\004\uff8a\006\uff8a\007\uff8a\010\uff8a\012\uff8a\014\uff8a\027" +
    "\uff8a\031\uff8a\033\uff8a\052\uff8a\001\002\000\032\002\uff8f" +
    "\003\uff8f\004\uff8f\006\uff8f\007\uff8f\010\uff8f\012\uff8f\014" +
    "\uff8f\027\uff8f\031\uff8f\033\uff8f\052\uff8f\001\002\000\032" +
    "\002\uff8e\003\uff8e\004\uff8e\006\uff8e\007\uff8e\010\uff8e\012" +
    "\uff8e\014\uff8e\027\uff8e\031\uff8e\033\uff8e\052\uff8e\001\002" +
    "\000\032\002\uff8b\003\uff8b\004\uff8b\006\uff8b\007\uff8b\010" +
    "\uff8b\012\uff8b\014\uff8b\027\uff8b\031\uff8b\033\uff8b\052\uff8b" +
    "\001\002\000\032\002\uff88\003\uff88\004\uff88\006\uff88\007" +
    "\uff88\010\uff88\012\uff88\014\uff88\027\uff88\031\uff88\033\uff88" +
    "\052\uff88\001\002\000\032\002\uff89\003\uff89\004\uff89\006" +
    "\uff89\007\uff89\010\uff89\012\uff89\014\uff89\027\uff89\031\uff89" +
    "\033\uff89\052\uff89\001\002\000\016\003\uff68\006\uff68\007" +
    "\uff68\014\uff68\027\032\052\030\001\002\000\032\002\uff90" +
    "\003\uff90\004\uff90\006\uff90\007\uff90\010\uff90\012\uff90\014" +
    "\uff90\027\uff90\031\uff90\033\uff90\052\uff90\001\002\000\032" +
    "\002\uff8d\003\uff8d\004\uff8d\006\uff8d\007\uff8d\010\uff8d\012" +
    "\uff8d\014\uff8d\027\uff8d\031\uff8d\033\uff8d\052\uff8d\001\002" +
    "\000\032\002\uff8c\003\uff8c\004\uff8c\006\uff8c\007\uff8c\010" +
    "\uff8c\012\uff8c\014\uff8c\027\uff8c\031\uff8c\033\uff8c\052\uff8c" +
    "\001\002\000\012\003\uff67\006\uff67\007\uff67\014\uff67\001" +
    "\002\000\020\037\073\040\056\041\070\042\116\052\122" +
    "\104\120\105\121\001\002\000\010\053\154\103\153\105" +
    "\uffdd\001\002\000\004\105\152\001\002\000\014\037\073" +
    "\040\056\041\070\052\136\104\120\001\002\000\046\002" +
    "\uffd7\003\uffd7\006\uffd7\007\uffd7\010\uffd7\013\uffd7\014\uffd7" +
    "\027\uffd7\031\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\052\uffd7\104\uffd7\001\002\000\024" +
    "\053\145\054\126\055\132\056\135\057\127\060\140\061" +
    "\142\103\144\105\uffdf\001\002\000\064\002\uffe9\003\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\013\uffe9\014\uffe9\031\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\104\uffe9\105\uffe9\001\002\000\064\002\uffe8" +
    "\003\uffe8\006\uffe8\007\uffe8\010\uffe8\013\uffe8\014\uffe8\031" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\104\uffe8\105\uffe8\001\002\000\022" +
    "\053\130\054\126\055\132\056\135\057\127\060\131\061" +
    "\134\105\uffd9\001\002\000\014\037\ufff4\040\ufff4\041\ufff4" +
    "\052\ufff4\104\ufff4\001\002\000\014\037\ufff1\040\ufff1\041" +
    "\ufff1\052\ufff1\104\ufff1\001\002\000\014\037\ufff5\040\ufff5" +
    "\041\ufff5\052\ufff5\104\ufff5\001\002\000\064\002\uffeb\003" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\013\uffeb\014\uffeb\031\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\104\uffeb\105\uffeb\001\002\000\014\037" +
    "\ufff3\040\ufff3\041\ufff3\052\ufff3\104\ufff3\001\002\000\014" +
    "\037\073\040\056\041\070\052\136\104\120\001\002\000" +
    "\064\002\uffea\003\uffea\006\uffea\007\uffea\010\uffea\013\uffea" +
    "\014\uffea\031\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\052\uffea\053\uffea\054\uffea\055\uffea" +
    "\056\uffea\057\uffea\060\uffea\061\uffea\104\uffea\105\uffea\001" +
    "\002\000\014\037\ufff2\040\ufff2\041\ufff2\052\ufff2\104\ufff2" +
    "\001\002\000\020\053\130\054\126\055\132\056\135\057" +
    "\127\060\140\061\142\001\002\000\064\002\uffed\003\uffed" +
    "\006\uffed\007\uffed\010\uffed\013\uffed\014\uffed\031\uffed\033" +
    "\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed" +
    "\052\uffed\053\130\054\126\055\132\056\135\057\127\060" +
    "\131\061\134\104\uffed\105\uffed\001\002\000\064\002\uffef" +
    "\003\uffef\006\uffef\007\uffef\010\uffef\013\uffef\014\uffef\031" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef" +
    "\041\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057" +
    "\uffef\060\uffef\061\uffef\104\uffef\105\uffef\001\002\000\004" +
    "\052\143\001\002\000\064\002\uffee\003\uffee\006\uffee\007" +
    "\uffee\010\uffee\013\uffee\014\uffee\031\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\052\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee" +
    "\104\uffee\105\uffee\001\002\000\064\002\ufff0\003\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\013\ufff0\014\ufff0\031\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\052" +
    "\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0" +
    "\061\ufff0\104\ufff0\105\ufff0\001\002\000\016\037\073\040" +
    "\056\041\070\042\116\052\122\104\120\001\002\000\016" +
    "\037\073\040\056\041\070\042\116\052\ufff5\104\120\001" +
    "\002\000\004\105\uffda\001\002\000\004\105\uffde\001\002" +
    "\000\022\053\130\054\126\055\132\056\135\057\127\060" +
    "\131\061\134\105\151\001\002\000\064\002\uffec\003\uffec" +
    "\006\uffec\007\uffec\010\uffec\013\uffec\014\uffec\031\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060" +
    "\uffec\061\uffec\104\uffec\105\uffec\001\002\000\046\002\uffd8" +
    "\003\uffd8\006\uffd8\007\uffd8\010\uffd8\013\uffd8\014\uffd8\027" +
    "\uffd8\031\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\052\uffd8\104\uffd8\001\002\000\016\037" +
    "\073\040\056\041\070\042\116\052\122\104\120\001\002" +
    "\000\016\037\073\040\056\041\070\042\116\052\122\104" +
    "\120\001\002\000\004\105\uffdb\001\002\000\004\105\uffdc" +
    "\001\002\000\012\003\uff6d\006\uff6d\007\uff6d\014\uff6d\001" +
    "\002\000\006\003\uff77\007\uff77\001\002\000\006\003\uff75" +
    "\007\uff75\001\002\000\054\003\uff6a\006\uff6a\007\uff6a\014" +
    "\uff6a\027\032\037\073\040\056\041\070\042\071\043\065" +
    "\044\061\052\164\070\053\071\057\072\067\073\052\074" +
    "\066\075\063\076\047\077\054\100\060\001\002\000\004" +
    "\030\166\001\002\000\026\070\uffc6\071\uffc6\072\uffc6\073" +
    "\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\104\115" +
    "\001\002\000\012\003\uff69\006\uff69\007\uff69\014\uff69\001" +
    "\002\000\026\015\101\016\105\017\102\020\111\021\107" +
    "\022\103\023\104\024\113\025\112\026\106\001\002\000" +
    "\016\003\uff6c\006\uff6c\007\uff6c\014\uff6c\027\032\052\030" +
    "\001\002\000\012\003\uff6b\006\uff6b\007\uff6b\014\uff6b\001" +
    "\002\000\004\032\uffae\001\002\000\026\032\uffaf\070\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077" +
    "\uffc6\100\uffc6\001\002\000\004\032\174\001\002\000\026" +
    "\014\207\027\176\031\206\034\213\035\200\037\073\040" +
    "\056\041\070\052\204\104\120\001\002\000\056\002\uff7f" +
    "\003\uff7f\006\uff7f\007\uff7f\010\uff7f\014\uff7f\031\uff7f\033" +
    "\uff7f\034\uff7f\035\uff7f\037\uff7f\040\uff7f\041\uff7f\052\uff7f" +
    "\053\130\054\126\055\132\056\135\057\127\060\131\061" +
    "\134\104\uff7f\001\002\000\036\002\uffac\003\uffac\006\uffac" +
    "\007\uffac\010\uffac\014\uffac\031\uffac\033\uffac\037\073\040" +
    "\056\041\070\042\071\043\065\044\061\001\002\000\022" +
    "\002\uffab\003\uffab\006\uffab\007\uffab\010\uffab\014\uffab\031" +
    "\uffab\033\uffab\001\002\000\042\037\073\040\056\041\070" +
    "\042\071\043\065\044\061\052\064\070\053\071\057\072" +
    "\067\073\052\074\066\075\063\076\047\077\054\100\060" +
    "\001\002\000\040\002\uff80\003\uff80\006\uff80\007\uff80\010" +
    "\uff80\014\uff80\031\uff80\033\uff80\034\uff80\035\uff80\037\uff80" +
    "\040\uff80\041\uff80\052\uff80\104\uff80\001\002\000\040\002" +
    "\uff7d\003\uff7d\006\uff7d\007\uff7d\010\uff7d\014\uff7d\031\uff7d" +
    "\033\uff7d\034\uff7d\035\uff7d\037\uff7d\040\uff7d\041\uff7d\052" +
    "\uff7d\104\uff7d\001\002\000\022\002\uffb3\003\uffb3\006\uffb3" +
    "\007\uffb3\010\uffb3\014\uffb3\031\uffb3\033\321\001\002\000" +
    "\036\053\130\054\126\055\132\056\135\057\127\060\140" +
    "\061\142\062\216\063\220\064\225\065\224\066\223\067" +
    "\217\104\115\001\002\000\040\002\uff7e\003\uff7e\006\uff7e" +
    "\007\uff7e\010\uff7e\014\uff7e\031\uff7e\033\uff7e\034\uff7e\035" +
    "\uff7e\037\uff7e\040\uff7e\041\uff7e\052\uff7e\104\uff7e\001\002" +
    "\000\042\037\073\040\056\041\070\042\071\043\065\044" +
    "\061\052\172\070\053\071\057\072\067\073\052\074\066" +
    "\075\063\076\047\077\054\100\060\001\002\000\024\027" +
    "\176\031\206\034\213\035\200\037\073\040\056\041\070" +
    "\052\204\104\120\001\002\000\040\002\uff83\003\uff83\006" +
    "\uff83\007\uff83\010\uff83\014\uff83\031\uff83\033\uff83\034\213" +
    "\035\200\037\073\040\056\041\070\052\204\104\120\001" +
    "\002\000\022\002\uffa9\003\uffa9\006\uffa9\007\uffa9\010\uffa9" +
    "\014\uffa9\031\uffa9\033\uffa9\001\002\000\022\002\uffaa\003" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\014\uffaa\031\uffaa\033\uffaa" +
    "\001\002\000\004\052\214\001\002\000\020\062\216\063" +
    "\220\064\225\065\224\066\223\067\217\103\215\001\002" +
    "\000\042\037\073\040\056\041\070\042\071\043\065\044" +
    "\061\052\064\070\053\071\057\072\067\073\052\074\066" +
    "\075\063\076\047\077\054\100\060\001\002\000\054\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\070\uffd5\071" +
    "\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5" +
    "\100\uffd5\001\002\000\054\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\001\002\000\054" +
    "\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\070\uffd4" +
    "\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077" +
    "\uffd4\100\uffd4\001\002\000\054\037\073\040\056\041\070" +
    "\042\262\043\065\044\061\045\251\046\260\047\264\050" +
    "\255\051\263\052\257\070\053\071\057\072\067\073\052" +
    "\074\066\075\063\076\047\077\054\100\060\001\002\000" +
    "\004\103\226\001\002\000\054\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1" +
    "\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\001\002\000" +
    "\054\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\070" +
    "\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2" +
    "\077\uffd2\100\uffd2\001\002\000\054\037\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\070\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\001\002" +
    "\000\042\037\073\040\056\041\070\042\071\043\065\044" +
    "\061\052\064\070\053\071\057\072\067\073\052\074\066" +
    "\075\063\076\047\077\054\100\060\001\002\000\004\103" +
    "\230\001\002\000\014\037\073\040\056\041\070\052\136" +
    "\104\120\001\002\000\034\013\236\037\073\040\056\041" +
    "\070\052\237\053\130\054\126\055\132\056\135\057\127" +
    "\060\131\061\134\104\120\001\002\000\060\002\uff95\003" +
    "\uff95\006\uff95\007\uff95\010\uff95\014\uff95\031\uff95\033\uff95" +
    "\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\052" +
    "\uff95\053\130\054\126\055\132\056\135\057\127\060\131" +
    "\061\134\104\uff95\001\002\000\042\002\uff96\003\uff96\006" +
    "\uff96\007\uff96\010\uff96\014\uff96\031\uff96\033\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\052\uff96\104" +
    "\uff96\001\002\000\040\002\uff9e\003\uff9e\006\uff9e\007\uff9e" +
    "\010\uff9e\014\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\052\uff9e\104\uff9e\001\002\000\040" +
    "\002\uff9b\003\uff9b\006\uff9b\007\uff9b\010\uff9b\014\uff9b\031" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\052\uff9b\104\uff9b\001\002\000\004\102\241\001\002\000" +
    "\036\053\130\054\126\055\132\056\135\057\127\060\140" +
    "\061\142\062\216\063\220\064\225\065\224\066\223\067" +
    "\217\104\115\001\002\000\042\002\uff97\003\uff97\006\uff97" +
    "\007\uff97\010\uff97\014\uff97\031\uff97\033\uff97\034\uff97\035" +
    "\uff97\036\uff97\037\uff97\040\uff97\041\uff97\052\uff97\104\uff97" +
    "\001\002\000\016\036\243\037\073\040\056\041\070\052" +
    "\237\104\120\001\002\000\004\014\246\001\002\000\004" +
    "\014\uff98\001\002\000\020\014\uff9a\036\243\037\073\040" +
    "\056\041\070\052\237\104\120\001\002\000\004\014\uff99" +
    "\001\002\000\004\102\247\001\002\000\040\002\uff9c\003" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\014\uff9c\031\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\037\uff9c\040\uff9c\041\uff9c\052\uff9c\104" +
    "\uff9c\001\002\000\044\002\uffcd\003\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\014\uffcd\031\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\052\uffcd\103\uffcd\104\uffcd" +
    "\001\002\000\044\002\ufffb\003\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\014\ufffb\031\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\052\ufffb\103\ufffb\104\ufffb\001" +
    "\002\000\066\002\uffcf\003\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\014\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\052\uffcf\070\ufff8\071\ufff8\072\ufff8" +
    "\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\103" +
    "\uffcf\104\uffcf\001\002\000\044\002\uffc9\003\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\014\uffc9\031\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\052\uffc9\103\uffc9" +
    "\104\uffc9\001\002\000\044\002\uffd6\003\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\014\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\052\uffd6\103\uffd6\104" +
    "\uffd6\001\002\000\044\002\uffcc\003\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\014\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\052\uffcc\103\uffcc\104\uffcc" +
    "\001\002\000\066\002\uffce\003\uffce\006\uffce\007\uffce\010" +
    "\uffce\014\uffce\031\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\052\uffce\070\ufff6\071\ufff6\072" +
    "\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6" +
    "\103\uffce\104\uffce\001\002\000\070\002\uffe5\003\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\014\uffe5\031\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\052\uffe5\053" +
    "\306\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6" +
    "\076\uffc6\077\uffc6\100\uffc6\103\uffe5\104\uffe5\001\002\000" +
    "\044\002\ufffa\003\ufffa\006\ufffa\007\ufffa\010\ufffa\014\ufffa" +
    "\031\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040" +
    "\ufffa\041\ufffa\052\ufffa\103\ufffa\104\ufffa\001\002\000\044" +
    "\002\uffca\003\uffca\006\uffca\007\uffca\010\uffca\014\uffca\031" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\052\uffca\103\uffca\104\uffca\001\002\000\070\002" +
    "\uffe4\003\uffe4\006\uffe4\007\uffe4\010\uffe4\014\uffe4\031\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\052\uffe4\053\265\070\ufff7\071\ufff7\072\ufff7\073\ufff7" +
    "\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\103\uffe4\104" +
    "\uffe4\001\002\000\044\002\uffcb\003\uffcb\006\uffcb\007\uffcb" +
    "\010\uffcb\014\uffcb\031\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\052\uffcb\103\uffcb\104\uffcb" +
    "\001\002\000\044\002\ufff9\003\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\014\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\052\ufff9\103\ufff9\104\ufff9\001" +
    "\002\000\010\042\267\052\266\104\271\001\002\000\050" +
    "\002\uffe5\003\uffe5\006\uffe5\007\uffe5\010\uffe5\014\uffe5\031" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\052\uffe5\053\306\103\uffe5\104\uffe5\105\uffe5\001" +
    "\002\000\050\002\uffe4\003\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\014\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\052\uffe4\053\265\103\uffe4\104\uffe4" +
    "\105\uffe4\001\002\000\046\002\uffe6\003\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\014\uffe6\031\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\052\uffe6\103\uffe6\104" +
    "\uffe6\105\uffe6\001\002\000\016\037\073\040\056\041\070" +
    "\042\267\052\272\104\120\001\002\000\022\053\277\054" +
    "\126\055\132\056\135\057\127\060\140\061\142\105\uffe5" +
    "\001\002\000\004\105\276\001\002\000\022\053\130\054" +
    "\126\055\132\056\135\057\127\060\131\061\134\105\275" +
    "\001\002\000\046\002\uffe0\003\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\014\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\052\uffe0\103\uffe0\104\uffe0\105" +
    "\uffe0\001\002\000\046\002\uffe2\003\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\014\uffe2\031\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\052\uffe2\103\uffe2\104\uffe2" +
    "\105\uffe2\001\002\000\010\042\267\052\ufff5\104\301\001" +
    "\002\000\046\002\uffe7\003\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\014\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\052\uffe7\103\uffe7\104\uffe7\105\uffe7" +
    "\001\002\000\016\037\073\040\056\041\070\042\267\052" +
    "\272\104\120\001\002\000\004\105\305\001\002\000\022" +
    "\053\130\054\126\055\132\056\135\057\127\060\131\061" +
    "\134\105\304\001\002\000\046\002\uffe1\003\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\014\uffe1\031\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\052\uffe1\103\uffe1" +
    "\104\uffe1\105\uffe1\001\002\000\046\002\uffe3\003\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\014\uffe3\031\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\052\uffe3\103" +
    "\uffe3\104\uffe3\105\uffe3\001\002\000\010\042\267\052\266" +
    "\104\301\001\002\000\004\103\310\001\002\000\014\037" +
    "\073\040\056\041\070\052\136\104\120\001\002\000\034" +
    "\013\236\037\073\040\056\041\070\052\237\053\130\054" +
    "\126\055\132\056\135\057\127\060\131\061\134\104\120" +
    "\001\002\000\040\002\uff9d\003\uff9d\006\uff9d\007\uff9d\010" +
    "\uff9d\014\uff9d\031\uff9d\033\uff9d\034\uff9d\035\uff9d\037\uff9d" +
    "\040\uff9d\041\uff9d\052\uff9d\104\uff9d\001\002\000\022\002" +
    "\uff82\003\uff82\006\uff82\007\uff82\010\uff82\014\uff82\031\uff82" +
    "\033\uff82\001\002\000\004\014\315\001\002\000\020\002" +
    "\uffb2\003\uffb2\006\uffb2\007\uffb2\010\uffb2\014\uffb2\031\uffb2" +
    "\001\002\000\004\032\317\001\002\000\024\027\176\031" +
    "\206\034\213\035\200\037\073\040\056\041\070\052\204" +
    "\104\120\001\002\000\004\033\321\001\002\000\026\013" +
    "\323\027\176\031\206\034\213\035\200\037\073\040\056" +
    "\041\070\052\204\104\120\001\002\000\022\002\uffb1\003" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\014\uffb1\031\uffb1\033\uffb1" +
    "\001\002\000\024\027\176\031\206\034\213\035\200\037" +
    "\073\040\056\041\070\052\204\104\120\001\002\000\004" +
    "\014\325\001\002\000\022\002\uffb0\003\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\014\uffb0\031\uffb0\033\uffb0\001\002\000\040" +
    "\002\uff81\003\uff81\006\uff81\007\uff81\010\uff81\014\uff81\031" +
    "\uff81\033\uff81\034\uff81\035\uff81\037\uff81\040\uff81\041\uff81" +
    "\052\uff81\104\uff81\001\002\000\016\013\336\037\073\040" +
    "\056\041\070\052\333\104\120\001\002\000\040\013\336" +
    "\037\073\040\056\041\070\052\333\070\ufff6\071\ufff6\072" +
    "\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6" +
    "\104\120\001\002\000\042\002\uffa0\003\uffa0\006\uffa0\007" +
    "\uffa0\010\uffa0\014\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\041\uffa0\052\uffa0\104\uffa0\001" +
    "\002\000\040\002\uffa5\003\uffa5\006\uffa5\007\uffa5\010\uffa5" +
    "\014\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\052\uffa5\104\uffa5\001\002\000\036\053\130" +
    "\054\126\055\132\056\135\057\127\060\140\061\142\062" +
    "\216\063\220\064\225\065\224\066\223\067\217\104\115" +
    "\001\002\000\040\002\uffa7\003\uffa7\006\uffa7\007\uffa7\010" +
    "\uffa7\014\uffa7\031\uffa7\033\uffa7\034\uffa7\035\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\052\uffa7\104\uffa7\001\002\000\060\002" +
    "\uff9f\003\uff9f\006\uff9f\007\uff9f\010\uff9f\014\uff9f\031\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041" +
    "\uff9f\052\uff9f\053\130\054\126\055\132\056\135\057\127" +
    "\060\131\061\134\104\uff9f\001\002\000\004\102\337\001" +
    "\002\000\016\036\342\037\073\040\056\041\070\052\333" +
    "\104\120\001\002\000\004\014\344\001\002\000\020\014" +
    "\uffa4\036\342\037\073\040\056\041\070\052\333\104\120" +
    "\001\002\000\004\014\uffa2\001\002\000\004\014\uffa3\001" +
    "\002\000\004\102\345\001\002\000\040\002\uffa6\003\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\014\uffa6\031\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\037\uffa6\040\uffa6\041\uffa6\052\uffa6\104\uffa6" +
    "\001\002\000\042\002\uffa1\003\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\014\uffa1\031\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\040\uffa1\041\uffa1\052\uffa1\104\uffa1\001\002\000" +
    "\040\002\uffa8\003\uffa8\006\uffa8\007\uffa8\010\uffa8\014\uffa8" +
    "\031\uffa8\033\uffa8\034\uffa8\035\uffa8\037\uffa8\040\uffa8\041" +
    "\uffa8\052\uffa8\104\uffa8\001\002\000\004\030\351\001\002" +
    "\000\026\015\101\016\105\017\102\020\111\021\107\022" +
    "\103\023\104\024\113\025\112\026\106\001\002\000\022" +
    "\002\uffad\003\uffad\006\uffad\007\uffad\010\uffad\014\uffad\031" +
    "\uffad\033\uffad\001\002\000\010\027\032\052\030\102\356" +
    "\001\002\000\010\003\uff72\006\020\007\uff72\001\002\000" +
    "\006\003\uff71\007\uff71\001\002\000\006\027\032\052\030" +
    "\001\002\000\004\014\360\001\002\000\004\102\361\001" +
    "\002\000\004\006\020\001\002\000\006\003\uff6f\007\uff6f" +
    "\001\002\000\004\014\364\001\002\000\004\102\365\001" +
    "\002\000\006\003\uff70\007\uff70\001\002\000\004\002\uff63" +
    "\001\002\000\004\102\371\001\002\000\004\002\001\001" +
    "\002\000\004\010\372\001\002\000\004\052\374\001\002" +
    "\000\004\002\uff64\001\002\000\006\052\030\104\115\001" +
    "\002\000\010\013\u0104\031\023\052\030\001\002\000\010" +
    "\002\uff58\010\uff58\052\030\001\002\000\006\002\uff5e\010" +
    "\372\001\002\000\012\002\uff55\010\uff55\014\uff55\031\uff55" +
    "\001\002\000\006\002\uff61\010\372\001\002\000\012\002" +
    "\uff56\010\uff56\014\uff56\031\uff56\001\002\000\012\002\uff5a" +
    "\010\uff5a\014\uff5a\031\023\001\002\000\004\102\u0105\001" +
    "\002\000\004\031\023\001\002\000\004\014\u0107\001\002" +
    "\000\004\102\u0108\001\002\000\006\002\uff62\010\372\001" +
    "\002\000\004\002\uff60\001\002\000\010\002\uff59\010\uff59" +
    "\014\uff59\001\002\000\004\002\uff5f\001\002\000\004\002" +
    "\uff5d\001\002\000\006\002\uff57\010\uff57\001\002\000\006" +
    "\002\uff5c\010\372\001\002\000\004\002\uff5b\001\002\000" +
    "\006\003\u0112\013\u0111\001\002\000\004\101\u0114\001\002" +
    "\000\006\003\uff84\005\uff84\001\002\000\006\003\uff87\005" +
    "\uff87\001\002\000\020\034\213\035\200\037\073\040\056" +
    "\041\070\052\204\104\120\001\002\000\004\014\u0116\001" +
    "\002\000\004\101\u0117\001\002\000\006\003\uff85\005\uff85" +
    "\001\002\000\004\012\u011a\001\002\000\010\003\uff94\004" +
    "\uff94\012\u011d\001\002\000\004\052\u011b\001\002\000\026" +
    "\015\101\016\105\017\102\020\111\021\107\022\103\023" +
    "\104\024\113\025\112\026\106\001\002\000\010\003\uff93" +
    "\004\uff93\012\uff93\001\002\000\004\052\u011e\001\002\000" +
    "\026\015\101\016\105\017\102\020\111\021\107\022\103" +
    "\023\104\024\113\025\112\026\106\001\002\000\010\003" +
    "\uff92\004\uff92\012\uff92\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\006\002\003\041\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\013\001\001\000\002\001\001\000\004\056\367\001\001" +
    "\000\002\001\001\000\004\051\016\001\001\000\002\001" +
    "\001\000\004\013\021\001\001\000\006\013\023\053\353" +
    "\001\001\000\016\013\023\025\030\030\032\052\025\053" +
    "\024\054\026\001\001\000\022\004\073\005\047\017\170" +
    "\020\071\021\054\023\061\024\045\027\172\001\001\000" +
    "\002\001\001\000\004\051\160\001\001\000\004\051\157" +
    "\001\001\000\012\025\030\030\032\052\156\054\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\073" +
    "\005\047\017\050\020\071\021\054\023\061\024\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\013\023" +
    "\025\030\030\032\052\036\053\035\054\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\073\005\047\020\076\023\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\074\024\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\073" +
    "\005\047\020\075\023\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\023\053\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\122" +
    "\007\124\010\123\012\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\122\007\147\010\123\001\001" +
    "\000\002\001\001\000\004\006\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\122\007\136\010\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\140\001\001\000\004\006\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\122\007\124\010\123\012\146\001\001\000\012" +
    "\005\122\007\124\010\123\012\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\122\007\124\010" +
    "\123\012\155\001\001\000\012\005\122\007\124\010\123" +
    "\012\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\073\005\047\013\023\017\162\020\071\021\054\023" +
    "\061\024\045\053\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\166\001\001\000" +
    "\006\013\023\053\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\122\007\174\010\123\013\200\025\210\026\202\031\204" +
    "\035\201\045\176\046\207\055\211\001\001\000\004\006" +
    "\132\001\001\000\010\004\347\005\047\023\061\001\001" +
    "\000\002\001\001\000\020\004\073\005\047\017\326\020" +
    "\071\021\054\023\327\024\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\140\014" +
    "\325\015\220\001\001\000\002\001\001\000\022\004\073" +
    "\005\047\017\170\020\071\021\054\023\061\024\045\027" +
    "\315\001\001\000\030\005\122\007\174\010\123\013\200" +
    "\025\210\026\313\031\204\035\201\045\176\046\207\055" +
    "\211\001\001\000\022\005\122\007\174\010\123\013\200" +
    "\031\204\035\201\045\312\046\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\221" +
    "\015\220\001\001\000\020\004\073\005\047\017\306\020" +
    "\071\021\054\023\061\024\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\247\004" +
    "\073\005\251\011\260\016\253\017\252\020\071\021\054" +
    "\023\255\024\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\073" +
    "\005\047\017\226\020\071\021\054\023\061\024\045\001" +
    "\001\000\002\001\001\000\010\005\122\007\230\010\123" +
    "\001\001\000\020\005\122\006\132\007\231\010\123\013" +
    "\232\036\233\040\234\001\001\000\004\006\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\140\014\237\015\220\001\001" +
    "\000\002\001\001\000\016\005\122\007\231\010\123\013" +
    "\232\037\241\040\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\122\007\231\010\123\013\232\037" +
    "\244\040\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\122" +
    "\007\273\010\123\011\272\001\001\000\004\006\140\001" +
    "\001\000\002\001\001\000\004\006\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\277\001\001\000" +
    "\002\001\001\000\012\005\122\007\302\010\123\011\301" +
    "\001\001\000\002\001\001\000\004\006\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\277\001\001" +
    "\000\002\001\001\000\010\005\122\007\310\010\123\001" +
    "\001\000\020\005\122\006\132\007\231\010\123\013\232" +
    "\036\311\040\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\122\007\174\010\123\013\200\025\210\026" +
    "\317\031\204\035\201\045\176\046\207\055\211\001\001" +
    "\000\002\001\001\000\030\005\122\007\174\010\123\013" +
    "\200\025\210\026\321\031\204\035\201\045\176\046\207" +
    "\055\211\001\001\000\002\001\001\000\030\005\122\007" +
    "\174\010\123\013\200\025\210\026\323\031\204\035\201" +
    "\045\176\046\207\055\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\122\007\334" +
    "\010\123\013\330\032\346\034\331\001\001\000\016\005" +
    "\122\007\334\010\123\013\330\032\333\034\331\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\140\014" +
    "\345\015\220\001\001\000\002\001\001\000\004\006\132" +
    "\001\001\000\002\001\001\000\016\005\122\007\334\010" +
    "\123\013\330\033\337\034\340\001\001\000\002\001\001" +
    "\000\016\005\122\007\334\010\123\013\330\033\342\034" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\351\001\001\000\002" +
    "\001\001\000\006\013\023\053\356\001\001\000\004\051" +
    "\354\001\001\000\002\001\001\000\006\013\023\053\362" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\361\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\372\001\001\000\004" +
    "\013\374\001\001\000\002\001\001\000\006\013\375\061" +
    "\u010d\001\001\000\016\013\375\025\377\030\u0101\060\u0100" +
    "\061\376\062\u0102\001\001\000\006\013\375\061\u010c\001" +
    "\001\000\004\057\u010b\001\001\000\002\001\001\000\004" +
    "\057\u010a\001\001\000\002\001\001\000\012\025\377\030" +
    "\u0101\060\u0109\062\u0102\001\001\000\002\001\001\000\012" +
    "\025\377\030\u0101\060\u0105\062\u0102\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\u0108\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\u010e\001\001\000\002" +
    "\001\001\000\004\047\u0112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\122\007\174" +
    "\010\123\013\200\031\204\035\201\045\u0114\046\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\u0118\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u011b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\u011e\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
        report_error("Error de sintaxis en linea " + (s.left + 1) + ", columna " + (s.right + 1) + ", \"" + s.value +"\"\n", null);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloqvars bloqPrin bloqFunc bloqProc 
            {
              Object RESULT =null;
		 System.out.println("Se termino de leer el programa"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LiteralAritmetico ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralAritmetico",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LiteralAritmetico ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralAritmetico",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LiteralAritmetico ::= SIMBOLO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralAritmetico",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LiteralHorario ::= FECHAHORA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralHorario",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LiteralHorario ::= FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralHorario",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LiteralHorario ::= HORA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LiteralHorario",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Literal ::= LiteralAritmetico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Literal ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Literal ::= Booleano 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OperadorAritmetico ::= SUMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorAritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OperadorAritmetico ::= RESTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorAritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OperadorAritmetico ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorAritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OperadorAritmetico ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorAritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OperadorAritmetico ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorAritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OperacionConstante ::= ID OperadorAritmetico ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionConstante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OperacionConstante ::= ID INC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionConstante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OperacionConstante ::= ID DEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionConstante",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Operacion ::= Operacion OperadorAritmetico Operacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Operacion ::= I_PAREN Operacion D_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Operacion ::= Operacion INC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Operacion ::= Operacion DEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Operacion ::= LiteralAritmetico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Operacion ::= OperacionConstante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Concatenacion ::= ID SUMA Concatenacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Concatenacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Concatenacion ::= TEXTO SUMA Concatenacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Concatenacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Concatenacion ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Concatenacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Concatenacion ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Concatenacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Concatenacion ::= ID SUMA I_PAREN Concatenacion D_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Concatenacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Concatenacion ::= TEXTO SUMA I_PAREN Concatenacion D_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Concatenacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Concatenacion ::= ID SUMA I_PAREN Operacion D_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Concatenacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Concatenacion ::= TEXTO SUMA I_PAREN Operacion D_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Concatenacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // param ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // param ::= ID COMA param 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // param ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // param ::= TEXTO COMA param 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // param ::= TEXTO SUMA param 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // param ::= ID SUMA param 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // param ::= Operacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcProc ::= ID I_PAREN param D_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcProc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcProc ::= ID I_PAREN D_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcProc",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Asignacion ::= OperadorAsignacion ExpresionAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OperadorAsignacion ::= ASG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OperadorAsignacion ::= ASG_SUMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OperadorAsignacion ::= ASG_RESTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OperadorAsignacion ::= ASG_MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OperadorAsignacion ::= ASG_DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OperadorAsignacion ::= ASG_MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpresionAsignacion ::= LiteralAritmetico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpresionAsignacion ::= Booleano 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpresionAsignacion ::= LiteralHorario 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpresionAsignacion ::= CURP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExpresionAsignacion ::= RFC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExpresionAsignacion ::= Concatenacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExpresionAsignacion ::= OperacionLogica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OperacionLogica ::= ExpresionLogica OperadorComparacion ExpresionLogica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionLogica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OperacionLogica ::= OperadorComparacion ExpresionLogica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionLogica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExpresionLogica ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionLogica",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExpresionLogica ::= Literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionLogica",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OperadorComparacion ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OperadorComparacion ::= DESIGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OperadorComparacion ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OperadorComparacion ::= MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OperadorComparacion ::= MEN_IG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OperadorComparacion ::= MAY_IG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OperadorComparacion ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OperadorComparacion ::= OperadorLogico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorComparacion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expresion ::= Literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expresion ::= R_VAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expresion ::= Operacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expresion ::= OperacionLogica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expresion ::= funcProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Booleano ::= FALSO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Booleano",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Booleano ::= VERDADERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Booleano",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OperadorLogico ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OperadorLogico ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperadorLogico",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SI ::= R_SI REGLA_SINO R_ENTONCES SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SI",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SI ::= R_SI REGLA_SINO R_ENTONCES R_FIN SENTENCIA R_FIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SI",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SISINO ::= R_SI REGLA_SINO R_ENTONCES SENTENCIA R_SINO SENTENCIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SISINO",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SISINO ::= R_SI REGLA_SINO R_ENTONCES SENTENCIA R_SINO R_INICIO SENTENCIA R_FIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SISINO",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // REGLA_SINO ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REGLA_SINO",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // REGLA_SINO ::= OperacionLogica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REGLA_SINO",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DEVOLVER ::= R_DEVOLVER Literal R_COMO TIPO_D 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEVOLVER",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DEVOLVER ::= R_DEVOLVER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEVOLVER",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA ::= DEVOLVER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA ::= SISINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BucleMientras ::= R_MIENTRAS OperacionLogica BloqueInstruccionesMientras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BucleMientras",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BucleMientras ::= R_MIENTRAS Booleano BloqueInstruccionesMientras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BucleMientras",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BloqueInstruccionesMientras ::= R_INICIO DOSPUNTOS instruccionesMientras R_FIN DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueInstruccionesMientras",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BloqueInstruccionesMientras ::= instruccionMientrasSimple 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueInstruccionesMientras",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // instruccionesMientras ::= instruccionMientrasSimple 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionesMientras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // instruccionesMientras ::= instruccionMientrasSimple instruccionesMientras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionesMientras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // instruccionesMientras ::= R_ROMPER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionesMientras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // instruccionMientrasSimple ::= ID Asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionMientrasSimple",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // instruccionMientrasSimple ::= funcProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionMientrasSimple",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // instruccionMientrasSimple ::= Operacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionMientrasSimple",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BuclePara ::= R_PARA ID Asignacion COMA OperacionLogica COMA Operacion BloqueInstruccionesPara 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BuclePara",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BuclePara ::= R_PARA ID COMA OperacionLogica COMA Operacion BloqueInstruccionesPara 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BuclePara",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BloqueInstruccionesPara ::= R_INICIO DOSPUNTOS instruccionesPara R_FIN DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueInstruccionesPara",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BloqueInstruccionesPara ::= instruccionParaSimple 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueInstruccionesPara",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // instruccionesPara ::= instruccionParaSimple 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionesPara",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // instruccionesPara ::= instruccionParaSimple instruccionesPara 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionesPara",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // instruccionesPara ::= R_ROMPER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionesPara",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // instruccionParaSimple ::= ID Asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionParaSimple",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // instruccionParaSimple ::= funcProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionParaSimple",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // instruccionParaSimple ::= Operacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionParaSimple",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // bloqvars ::= R_VARS DOSPUNTOS D_VAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqvars",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // D_VAR ::= R_VAR ID TIPO_D 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D_VAR",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // D_VAR ::= D_VAR R_VAR ID TIPO_D 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D_VAR",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TIPO_D ::= R_ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_D",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TIPO_D ::= R_TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_D",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TIPO_D ::= R_FECHAHORA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_D",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TIPO_D ::= R_FECHA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_D",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TIPO_D ::= R_CURP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_D",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TIPO_D ::= R_HORA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_D",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIPO_D ::= R_DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_D",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TIPO_D ::= R_SIMBOLO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_D",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TIPO_D ::= R_LOGICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_D",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TIPO_D ::= R_RFC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_D",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // bloqPrin ::= R_PRINCIPAL DOSPUNTOS bloqInstrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqPrin",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // bloqPrin ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqPrin",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // bloqInstrucciones ::= R_INICIO PUNTO instrucciones R_FIN PUNTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqInstrucciones",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // bloqInstrucciones ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqInstrucciones",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // instrucciones ::= instruccionSimple 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // instrucciones ::= instruccionSimple instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // instruccionSimple ::= ID Asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSimple",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // instruccionSimple ::= funcProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSimple",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // instruccionSimple ::= Operacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSimple",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // instruccionSimple ::= BucleMientras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSimple",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // instruccionSimple ::= BuclePara 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSimple",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // bloqFunc ::= R_FUNCS DOSPUNTOS declarFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqFunc",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // bloqFunc ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqFunc",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // declarFunc ::= R_FUNC funcProc R_INICIO DOSPUNTOS instruccionesFunc R_FIN DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarFunc",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // declarFunc ::= R_FUNC funcProc instruccionesFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarFunc",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // declarFunc ::= R_FUNC funcProc R_INICIO DOSPUNTOS instruccionesFunc R_FIN DOSPUNTOS declarFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarFunc",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // declarFunc ::= R_FUNC funcProc instruccionesFunc declarFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarFunc",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // declarFunc ::= R_FUNC funcProc instruccionSimpleFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarFunc",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // declarFunc ::= R_FUNC funcProc instruccionSimpleFunc declarFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarFunc",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // declarFunc ::= R_FUNC funcProc R_INICIO DOSPUNTOS instruccionSimpleFunc R_FIN DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarFunc",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // declarFunc ::= R_FUNC funcProc R_INICIO DOSPUNTOS instruccionSimpleFunc R_FIN DOSPUNTOS declarFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarFunc",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // declarFunc ::= R_FUNC ID instruccionSimpleFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarFunc",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // declarFunc ::= R_FUNC ID instruccionSimpleFunc declarFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarFunc",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // declarFunc ::= R_FUNC ID R_INICIO DOSPUNTOS instruccionSimpleFunc R_FIN DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarFunc",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // declarFunc ::= R_FUNC ID R_INICIO instruccionSimpleFunc R_FIN DOSPUNTOS declarFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarFunc",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // instruccionesFunc ::= instruccionSINOfunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionesFunc",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // instruccionesFunc ::= instruccionSINOfunc instruccionesFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionesFunc",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // instruccionSimpleFunc ::= funcProc R_DEVOLVER OperacionLogica R_COMO TIPO_D 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSimpleFunc",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // instruccionSimpleFunc ::= funcProc R_DEVOLVER OperacionLogica R_COMO TIPO_D instruccionSimpleFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSimpleFunc",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // instruccionSimpleFunc ::= funcProc R_DEVOLVER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSimpleFunc",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // instruccionSimpleFunc ::= funcProc R_DEVOLVER instruccionSimpleFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSimpleFunc",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // instruccionSimpleFunc ::= R_DEVOLVER OperacionLogica R_COMO TIPO_D 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSimpleFunc",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // instruccionSimpleFunc ::= R_DEVOLVER OperacionLogica R_COMO TIPO_D instruccionSimpleFunc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSimpleFunc",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // instruccionSINOfunc ::= SI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSINOfunc",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // instruccionSINOfunc ::= SISINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSINOfunc",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // bloqProc ::= R_PROCS DOSPUNTOS declarProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqProc",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // bloqProc ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqProc",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // declarProc ::= R_PROC funcProc R_INICIO DOSPUNTOS instruccionesProc R_FIN DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarProc",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // declarProc ::= R_PROC funcProc instruccionesProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarProc",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // declarProc ::= R_PROC funcProc R_INICIO DOSPUNTOS instruccionesProc R_FIN DOSPUNTOS declarProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarProc",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // declarProc ::= R_PROC funcProc instruccionesProc declarProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarProc",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // declarProc ::= R_PROC funcProc instruccionSimpleProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarProc",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // declarProc ::= R_PROC funcProc instruccionSimpleProc declarProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarProc",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // declarProc ::= R_PROC ID instruccionSimpleProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarProc",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // declarProc ::= R_PROC ID instruccionSimpleProc declarProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarProc",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // instruccionesProc ::= instruccionSINOproc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionesProc",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // instruccionesProc ::= instruccionSINOproc instruccionesProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionesProc",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // instruccionSimpleProc ::= funcProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSimpleProc",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // instruccionSimpleProc ::= funcProc instruccionSimpleProc 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSimpleProc",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // instruccionSINOproc ::= SI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSINOproc",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // instruccionSINOproc ::= SISINO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionSINOproc",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
