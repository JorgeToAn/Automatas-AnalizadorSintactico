// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/Lexer.flex

package com.proyecto;

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\37\u0200\1\u0500"+
    "\u1000\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\0\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\2\31\1\30\1\32"+
    "\1\0\1\33\1\34\1\35\2\0\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\46\1\62\2\50\1\63\1\64\4\0\1\65"+
    "\1\0\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\2\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\77\1\105\1\106\1\107\1\110\1\111\1\77\1\112"+
    "\2\77\1\0\1\113\1\0\1\114\6\0\1\3\33\0"+
    "\1\77\7\0\1\77\3\0\1\77\5\0\1\77\6\0"+
    "\1\77\1\0\1\77\6\0\1\77\217\0\1\77\15\0"+
    "\1\77\u01ba\0\1\77\13\0\2\3\6\0\1\77\317\0"+
    "\u0100\3\375\0\1\77\2\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\4\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\1\16\21\1\22\1\23"+
    "\1\0\1\24\1\0\1\25\1\0\1\26\1\27\1\30"+
    "\1\31\2\14\1\32\1\33\1\34\2\0\2\14\1\35"+
    "\1\36\1\37\2\21\2\0\20\21\1\40\3\21\1\41"+
    "\3\0\1\14\2\21\1\42\1\43\10\21\1\44\7\21"+
    "\1\45\6\21\2\0\1\14\4\21\1\46\1\47\7\21"+
    "\1\50\3\21\1\51\3\21\1\52\3\21\2\0\10\21"+
    "\1\53\1\54\7\21\1\55\2\21\3\0\7\21\1\56"+
    "\1\21\1\0\1\21\1\57\1\60\2\21\1\61\3\21"+
    "\4\0\7\21\1\0\1\62\2\21\1\0\1\63\2\21"+
    "\1\64\2\21\3\0\1\65\12\21\1\0\1\66\1\67"+
    "\1\0\1\21\1\70\1\21\1\71\1\21\4\0\11\21"+
    "\2\0\1\72\1\21\1\73\1\74\1\75\1\21\2\76"+
    "\1\0\1\77\1\21\1\0\2\21\1\0\1\21\2\0"+
    "\16\21\1\0\1\21\1\0\1\21\1\0\1\100\1\0"+
    "\1\21\1\0\1\101\1\0\1\21\2\0\1\21\1\102"+
    "\1\0\1\21\1\0\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce"+
    "\0\115\0\115\0\u021b\0\u0268\0\115\0\u02b5\0\115\0\u0302"+
    "\0\u034f\0\u039c\0\u03e9\0\u0436\0\115\0\u0483\0\u04d0\0\u051d"+
    "\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e\0\u06eb\0\u0738\0\u0785"+
    "\0\u07d2\0\u081f\0\u086c\0\u08b9\0\u0906\0\u0953\0\u09a0\0\u09ed"+
    "\0\115\0\115\0\347\0\115\0\u0134\0\115\0\u0a3a\0\115"+
    "\0\115\0\115\0\115\0\u0a87\0\u0ad4\0\115\0\115\0\u0b21"+
    "\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55\0\115\0\115\0\115\0\u0ca2"+
    "\0\u0cef\0\u0d3c\0\u0d89\0\u0dd6\0\u0e23\0\u0e70\0\u0ebd\0\u0f0a"+
    "\0\u0f57\0\u0fa4\0\u0ff1\0\u103e\0\u108b\0\u10d8\0\u1125\0\u1172"+
    "\0\u11bf\0\u120c\0\u1259\0\u12a6\0\u12f3\0\u1340\0\u138d\0\115"+
    "\0\u13da\0\u1427\0\u1474\0\u14c1\0\u150e\0\u155b\0\115\0\115"+
    "\0\u15a8\0\u15f5\0\u1642\0\u168f\0\u16dc\0\u1729\0\u1776\0\u17c3"+
    "\0\u0604\0\u1810\0\u185d\0\u18aa\0\u18f7\0\u1944\0\u1991\0\u19de"+
    "\0\u0604\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9"+
    "\0\u1c46\0\u1c93\0\u1ce0\0\u1d2d\0\u1d7a\0\u1dc7\0\u0604\0\u0604"+
    "\0\u1e14\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u0604"+
    "\0\u202f\0\u207c\0\u20c9\0\u0604\0\u2116\0\u2163\0\u21b0\0\u0604"+
    "\0\u21fd\0\u224a\0\u2297\0\u22e4\0\u2331\0\u237e\0\u23cb\0\u2418"+
    "\0\u2465\0\u24b2\0\u24ff\0\u254c\0\u2599\0\u0604\0\u25e6\0\u2633"+
    "\0\u2680\0\u26cd\0\u271a\0\u2767\0\u27b4\0\u2801\0\u0604\0\u284e"+
    "\0\u289b\0\u28e8\0\u2935\0\u2982\0\u29cf\0\u2a1c\0\u2a69\0\u2ab6"+
    "\0\u2b03\0\u2b50\0\u2b9d\0\u0604\0\u2bea\0\u2c37\0\u2c84\0\u0604"+
    "\0\u0604\0\u2cd1\0\u2d1e\0\u0604\0\u2d6b\0\u2db8\0\u2e05\0\u2e52"+
    "\0\u2e9f\0\u2eec\0\u2f39\0\u2f86\0\u2fd3\0\u3020\0\u306d\0\u30ba"+
    "\0\u3107\0\u3154\0\u31a1\0\u0604\0\u31ee\0\u323b\0\u3288\0\u32d5"+
    "\0\u3322\0\u336f\0\u0604\0\u33bc\0\u3409\0\u3456\0\u34a3\0\u34f0"+
    "\0\115\0\u353d\0\u358a\0\u35d7\0\u3624\0\u3671\0\u36be\0\u370b"+
    "\0\u3758\0\u37a5\0\u37f2\0\u383f\0\u0604\0\u0604\0\u388c\0\u38d9"+
    "\0\u0604\0\u3926\0\u3973\0\u39c0\0\u3a0d\0\u3a5a\0\u3aa7\0\u3af4"+
    "\0\u3b41\0\u3b8e\0\u3bdb\0\u3c28\0\u3c75\0\u3cc2\0\u3d0f\0\u3d5c"+
    "\0\u3da9\0\u3df6\0\u3e43\0\u0604\0\u3e90\0\u0604\0\u0604\0\u3edd"+
    "\0\u3f2a\0\u3f77\0\u0604\0\u3fc4\0\115\0\u4011\0\u405e\0\u40ab"+
    "\0\u40f8\0\u4145\0\u4192\0\u41df\0\u422c\0\u4279\0\u42c6\0\u4313"+
    "\0\u4360\0\u43ad\0\u43fa\0\u4447\0\u4494\0\u44e1\0\u452e\0\u457b"+
    "\0\u45c8\0\u4615\0\u4662\0\u46af\0\u46fc\0\u4749\0\u4796\0\u47e3"+
    "\0\u4830\0\u487d\0\u48ca\0\u4917\0\u0604\0\u4964\0\u49b1\0\u49fe"+
    "\0\u4a4b\0\u4a98\0\115\0\u4ae5\0\u4b32\0\u4b7f\0\u0604\0\115";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\5\24\1\25\1\26\1\27"+
    "\1\30\27\31\1\32\2\33\1\34\1\35\1\36\1\37"+
    "\1\33\1\40\1\41\1\33\1\42\1\43\2\33\1\44"+
    "\1\45\1\46\1\47\1\33\1\50\1\33\1\2\1\51"+
    "\151\0\1\52\60\0\6\53\1\54\106\53\2\55\1\3"+
    "\2\0\110\55\34\0\1\56\60\0\2\57\3\0\110\57"+
    "\34\0\1\60\75\0\1\61\16\0\1\62\77\0\1\63"+
    "\2\0\1\64\7\65\2\0\1\66\114\0\1\67\100\0"+
    "\1\70\1\0\1\71\7\72\103\0\1\70\1\0\10\73"+
    "\103\0\1\70\1\0\5\73\3\74\103\0\1\70\1\0"+
    "\10\74\117\0\1\75\114\0\1\76\114\0\1\77\102\0"+
    "\10\33\4\0\1\100\3\101\1\100\3\101\1\100\5\101"+
    "\1\100\10\101\26\33\56\0\1\102\6\0\1\103\53\0"+
    "\10\33\4\0\55\33\24\0\10\33\4\0\45\33\1\104"+
    "\4\33\1\105\2\33\24\0\10\33\4\0\34\33\1\106"+
    "\20\33\24\0\10\33\4\0\44\33\1\107\10\33\24\0"+
    "\10\33\4\0\30\33\1\110\3\33\1\111\3\33\1\112"+
    "\11\33\1\113\2\33\24\0\10\33\4\0\45\33\1\114"+
    "\7\33\24\0\10\33\4\0\44\33\1\115\10\33\24\0"+
    "\10\33\4\0\45\33\1\116\7\33\24\0\10\33\4\0"+
    "\40\33\1\117\14\33\24\0\10\33\4\0\30\33\1\120"+
    "\16\33\1\121\5\33\24\0\10\33\4\0\35\33\1\122"+
    "\7\33\1\123\7\33\24\0\10\33\4\0\40\33\1\124"+
    "\14\33\24\0\10\33\4\0\34\33\1\125\20\33\24\0"+
    "\10\33\4\0\30\33\1\126\3\33\1\127\20\33\13\0"+
    "\1\130\123\0\1\70\114\0\1\70\1\0\10\65\105\0"+
    "\10\70\105\0\1\131\7\132\1\133\104\0\10\132\1\133"+
    "\102\0\1\70\1\0\10\134\1\133\102\0\1\70\1\0"+
    "\10\134\105\0\10\33\4\0\27\135\26\33\24\0\10\33"+
    "\4\0\27\136\26\33\67\0\1\137\114\0\1\140\51\0"+
    "\10\33\4\0\33\33\1\141\7\33\1\142\11\33\24\0"+
    "\10\33\4\0\47\33\1\143\5\33\24\0\10\33\4\0"+
    "\32\33\1\144\20\33\1\145\1\33\24\0\10\33\4\0"+
    "\51\33\1\146\3\33\24\0\10\33\4\0\42\33\1\147"+
    "\12\33\24\0\10\33\4\0\32\33\1\150\22\33\24\0"+
    "\10\33\4\0\44\33\1\151\10\33\24\0\10\33\4\0"+
    "\44\33\1\152\10\33\24\0\10\33\4\0\47\33\1\153"+
    "\5\33\24\0\10\33\4\0\40\33\1\154\14\33\24\0"+
    "\10\33\4\0\36\33\1\155\16\33\24\0\10\33\4\0"+
    "\34\33\1\156\20\33\24\0\10\33\4\0\47\33\1\157"+
    "\5\33\24\0\10\33\4\0\45\33\1\160\7\33\24\0"+
    "\10\33\4\0\32\33\1\161\22\33\24\0\10\33\4\0"+
    "\43\33\1\162\11\33\24\0\10\33\4\0\43\33\1\163"+
    "\1\164\10\33\24\0\10\33\4\0\54\33\1\165\24\0"+
    "\10\33\4\0\47\33\1\166\5\33\24\0\10\33\4\0"+
    "\47\33\1\167\5\33\25\0\7\170\105\0\10\170\105\0"+
    "\6\171\105\0\1\70\1\0\10\172\105\0\10\173\4\0"+
    "\27\174\26\33\24\0\10\173\4\0\27\175\26\33\24\0"+
    "\10\33\4\0\40\33\1\176\14\33\24\0\10\33\4\0"+
    "\45\33\1\177\7\33\24\0\10\33\4\0\46\33\1\200"+
    "\6\33\24\0\10\33\4\0\40\33\1\201\14\33\24\0"+
    "\10\33\4\0\45\33\1\202\7\33\24\0\10\33\4\0"+
    "\34\33\1\203\10\33\1\204\7\33\24\0\10\33\4\0"+
    "\50\33\1\205\4\33\24\0\10\33\4\0\37\33\1\206"+
    "\15\33\24\0\10\33\4\0\32\33\1\207\22\33\24\0"+
    "\10\33\4\0\30\33\1\210\24\33\24\0\10\33\4\0"+
    "\32\33\1\211\22\33\24\0\10\33\4\0\40\33\1\212"+
    "\14\33\24\0\10\33\4\0\44\33\1\213\10\33\24\0"+
    "\10\33\4\0\30\33\1\214\24\33\24\0\10\33\4\0"+
    "\32\33\1\215\22\33\24\0\10\33\4\0\46\33\1\216"+
    "\6\33\24\0\10\33\4\0\31\33\1\217\23\33\24\0"+
    "\10\33\4\0\45\33\1\220\7\33\24\0\10\33\4\0"+
    "\51\33\1\221\3\33\24\0\10\33\4\0\40\33\1\222"+
    "\14\33\24\0\10\33\4\0\33\33\1\223\21\33\21\0"+
    "\1\224\117\0\10\225\102\0\1\224\1\70\1\0\10\65"+
    "\105\0\10\226\4\0\55\33\24\0\10\227\4\0\55\33"+
    "\24\0\10\230\4\0\55\33\24\0\10\33\4\0\36\33"+
    "\1\231\16\33\24\0\10\33\4\0\43\33\1\232\11\33"+
    "\24\0\10\33\4\0\42\33\1\233\12\33\24\0\10\33"+
    "\4\0\47\33\1\234\5\33\24\0\10\33\4\0\44\33"+
    "\1\235\10\33\24\0\10\33\4\0\45\33\1\236\7\33"+
    "\24\0\10\33\4\0\30\33\1\237\24\33\24\0\10\33"+
    "\4\0\40\33\1\240\14\33\24\0\10\33\4\0\40\33"+
    "\1\241\14\33\24\0\10\33\4\0\32\33\1\242\22\33"+
    "\24\0\10\33\4\0\51\33\1\243\3\33\24\0\10\33"+
    "\4\0\34\33\1\244\20\33\24\0\10\33\4\0\34\33"+
    "\1\245\20\33\24\0\10\33\4\0\45\33\1\246\7\33"+
    "\24\0\10\33\4\0\45\33\1\247\7\33\24\0\10\33"+
    "\4\0\30\33\1\250\24\33\24\0\10\33\4\0\30\33"+
    "\1\251\24\33\24\0\1\252\1\253\123\0\1\254\104\0"+
    "\1\255\1\256\6\33\4\0\55\33\24\0\10\257\4\0"+
    "\55\33\24\0\10\260\4\0\55\33\24\0\10\33\4\0"+
    "\45\33\1\261\7\33\24\0\10\33\4\0\30\33\1\262"+
    "\24\33\24\0\10\33\4\0\53\33\1\263\1\33\24\0"+
    "\10\33\4\0\45\33\1\264\7\33\24\0\10\33\4\0"+
    "\32\33\1\265\22\33\21\0\1\266\2\0\10\33\4\0"+
    "\55\33\24\0\10\33\4\0\45\33\1\267\7\33\24\0"+
    "\10\33\4\0\45\33\1\270\7\33\24\0\10\33\4\0"+
    "\45\33\1\271\7\33\24\0\10\33\4\0\47\33\1\272"+
    "\5\33\24\0\10\33\4\0\33\33\1\273\21\33\24\0"+
    "\10\33\4\0\47\33\1\274\5\33\24\0\10\33\4\0"+
    "\42\33\1\275\12\33\24\0\10\33\4\0\31\33\1\276"+
    "\23\33\24\0\10\33\4\0\33\33\1\277\21\33\25\0"+
    "\1\300\1\301\1\300\1\302\1\300\1\302\1\300\61\0"+
    "\1\300\23\0\1\300\1\302\1\300\66\0\1\300\23\0"+
    "\6\303\107\0\1\33\1\304\1\305\1\304\1\306\1\304"+
    "\1\306\1\304\4\0\55\33\24\0\1\304\1\306\1\304"+
    "\5\33\4\0\55\33\24\0\1\307\1\310\6\33\4\0"+
    "\55\33\24\0\1\311\1\312\6\33\4\0\55\33\21\0"+
    "\1\313\2\0\10\33\4\0\55\33\24\0\10\33\4\0"+
    "\42\33\1\314\12\33\24\0\10\33\4\0\34\33\1\315"+
    "\20\33\24\0\10\33\4\0\34\33\1\316\20\33\77\0"+
    "\1\317\41\0\10\33\4\0\44\33\1\320\10\33\24\0"+
    "\10\33\4\0\30\33\1\321\24\33\24\0\10\33\4\0"+
    "\40\33\1\322\14\33\24\0\10\33\4\0\45\33\1\323"+
    "\7\33\24\0\10\33\4\0\42\33\1\324\12\33\24\0"+
    "\10\33\4\0\34\33\1\325\20\33\21\0\1\326\114\0"+
    "\1\327\114\0\1\330\117\0\10\331\105\0\1\332\2\333"+
    "\1\334\4\33\4\0\55\33\24\0\1\332\2\333\5\33"+
    "\4\0\55\33\24\0\1\332\2\333\1\335\4\33\4\0"+
    "\55\33\24\0\1\33\1\336\1\337\1\336\1\340\1\336"+
    "\1\340\1\336\4\0\55\33\24\0\1\336\1\340\1\336"+
    "\5\33\4\0\55\33\24\0\1\33\1\341\1\342\1\341"+
    "\1\343\1\341\1\343\1\341\4\0\55\33\24\0\1\341"+
    "\1\343\1\341\5\33\4\0\55\33\106\0\1\344\32\0"+
    "\10\33\4\0\47\33\1\345\5\33\24\0\10\33\4\0"+
    "\50\33\1\346\4\33\105\0\1\347\33\0\10\33\4\0"+
    "\34\33\1\350\20\33\24\0\10\33\4\0\50\33\1\351"+
    "\4\33\24\0\10\33\4\0\43\33\1\352\11\33\24\0"+
    "\10\33\4\0\34\33\1\353\20\33\24\0\10\33\4\0"+
    "\47\33\1\354\5\33\24\0\1\355\2\356\1\357\111\0"+
    "\1\355\2\356\112\0\1\355\2\356\1\360\111\0\1\33"+
    "\7\361\4\0\55\33\24\0\10\361\4\0\55\33\24\0"+
    "\2\361\6\33\4\0\55\33\24\0\1\361\7\33\4\0"+
    "\55\33\24\0\1\362\2\363\1\364\4\33\4\0\55\33"+
    "\24\0\1\362\2\363\5\33\4\0\55\33\24\0\1\362"+
    "\2\363\1\365\4\33\4\0\55\33\24\0\1\366\2\367"+
    "\1\370\4\33\4\0\55\33\24\0\1\366\2\367\5\33"+
    "\4\0\55\33\24\0\1\366\2\367\1\371\4\33\4\0"+
    "\55\33\107\0\1\372\114\0\1\373\31\0\10\33\4\0"+
    "\50\33\1\374\4\33\24\0\10\33\4\0\40\33\1\375"+
    "\14\33\24\0\10\33\4\0\50\33\1\376\4\33\24\0"+
    "\10\33\4\0\45\33\1\377\7\33\25\0\7\u0100\105\0"+
    "\10\u0100\105\0\2\u0100\113\0\1\u0100\114\0\10\u0101\4\0"+
    "\27\u0101\26\33\24\0\1\33\7\u0102\4\0\55\33\24\0"+
    "\10\u0102\4\0\55\33\24\0\2\u0102\6\33\4\0\55\33"+
    "\24\0\1\u0102\7\33\4\0\55\33\24\0\1\33\7\u0103"+
    "\4\0\55\33\24\0\10\u0103\4\0\55\33\24\0\2\u0103"+
    "\6\33\4\0\55\33\24\0\1\u0103\7\33\4\0\55\33"+
    "\100\0\1\u0104\104\0\1\u0105\50\0\10\33\4\0\34\33"+
    "\1\u0106\20\33\63\0\1\u0107\55\0\10\u0108\4\0\27\u0108"+
    "\26\33\24\0\10\33\4\0\7\33\1\u0109\4\33\1\u0109"+
    "\40\33\104\0\1\u010a\34\0\10\33\4\0\44\33\1\u010b"+
    "\10\33\24\0\2\u010c\1\u010d\112\0\10\u0103\4\0\27\u0103"+
    "\26\33\24\0\10\33\4\0\1\u010e\1\u010f\1\u0110\1\u0111"+
    "\2\33\1\u0112\1\u0113\1\33\1\u0114\2\33\1\u0115\1\u0116"+
    "\1\u0114\1\u0117\1\u0112\1\33\1\u0118\1\u0119\1\u011a\1\u011b"+
    "\1\u010e\26\33\72\0\1\u011c\46\0\10\33\4\0\51\33"+
    "\1\u011d\3\33\24\0\10\u011e\105\0\5\u011e\110\0\10\33"+
    "\4\0\22\33\1\u011f\32\33\24\0\10\33\4\0\2\33"+
    "\1\u011f\17\33\1\u011f\32\33\24\0\10\33\4\0\2\33"+
    "\1\u011f\4\33\1\u011f\3\33\2\u011f\5\33\1\u011f\32\33"+
    "\24\0\10\33\4\0\5\33\2\u011f\46\33\24\0\10\33"+
    "\4\0\21\33\1\u011f\1\33\1\u011f\31\33\24\0\10\33"+
    "\4\0\6\33\1\u011f\46\33\24\0\10\33\4\0\2\33"+
    "\1\u011f\52\33\24\0\10\33\4\0\2\33\1\u011f\12\33"+
    "\1\u011f\4\33\1\u011f\32\33\24\0\10\33\4\0\4\33"+
    "\1\u011f\6\33\1\u011f\7\33\1\u011f\31\33\24\0\10\33"+
    "\4\0\13\33\1\u011f\41\33\24\0\10\33\4\0\13\33"+
    "\1\u011f\3\33\1\u011f\1\33\1\u011f\33\33\24\0\10\33"+
    "\4\0\2\33\1\u011f\10\33\1\u011f\6\33\1\u011f\32\33"+
    "\24\0\10\33\4\0\26\33\1\u011f\26\33\24\0\10\33"+
    "\4\0\15\33\1\u011f\37\33\100\0\1\u0120\40\0\10\33"+
    "\4\0\45\33\1\u0121\7\33\34\0\1\u0122\104\0\10\33"+
    "\4\0\1\33\3\u0123\1\33\3\u0123\1\33\5\u0123\1\33"+
    "\10\u0123\26\33\106\0\1\u0124\32\0\10\33\4\0\50\33"+
    "\1\u0125\4\33\24\0\6\u0126\107\0\10\33\4\0\1\33"+
    "\3\u0127\1\33\3\u0127\1\33\5\u0127\1\33\10\u0127\26\33"+
    "\70\0\1\u0128\50\0\10\u0129\105\0\10\33\4\0\1\33"+
    "\3\u012a\1\33\3\u012a\1\33\5\u012a\1\33\10\u012a\26\33"+
    "\102\0\1\u012b\46\0\1\u012c\104\0\10\u012d\4\0\27\u012d"+
    "\26\33\24\0\6\u012e\107\0\10\u012f\4\0\55\33\24\0"+
    "\10\u0130\63\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19404];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\2\11\2\1\1\11\1\1\1\11"+
    "\5\1\1\11\23\1\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\4\11\2\1\2\11\1\1\2\0\2\1\3\11"+
    "\2\1\2\0\24\1\1\11\3\0\3\1\2\11\27\1"+
    "\2\0\32\1\2\0\24\1\3\0\11\1\1\0\11\1"+
    "\4\0\7\1\1\0\3\1\1\0\6\1\3\0\1\11"+
    "\12\1\1\0\2\1\1\0\5\1\4\0\11\1\2\0"+
    "\10\1\1\0\1\11\1\1\1\0\2\1\1\0\1\1"+
    "\2\0\16\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\0\1\1"+
    "\1\11\1\0\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbol(ParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Caracter ilegal <" + yytext() + ">\n Linea: " + yyline() + "Columna: " + yycolumn() );
            }
          // fall through
          case 69: break;
          case 2:
            { /* IGNORAR */
            }
          // fall through
          case 70: break;
          case 3:
            { return symbol(ParserSym.MOD, yytext());
            }
          // fall through
          case 71: break;
          case 4:
            { return symbol(ParserSym.I_PAREN, yytext());
            }
          // fall through
          case 72: break;
          case 5:
            { return symbol(ParserSym.D_PAREN, yytext());
            }
          // fall through
          case 73: break;
          case 6:
            { return symbol(ParserSym.MUL, yytext());
            }
          // fall through
          case 74: break;
          case 7:
            { return symbol(ParserSym.SUMA, yytext());
            }
          // fall through
          case 75: break;
          case 8:
            { return symbol(ParserSym.COMA, yytext());
            }
          // fall through
          case 76: break;
          case 9:
            { return symbol(ParserSym.RESTA, yytext());
            }
          // fall through
          case 77: break;
          case 10:
            { return symbol(ParserSym.PUNTO, yytext());
            }
          // fall through
          case 78: break;
          case 11:
            { return symbol(ParserSym.DIV, yytext());
            }
          // fall through
          case 79: break;
          case 12:
            { return symbol(ParserSym.ENTERO, Integer.valueOf(yytext()));
            }
          // fall through
          case 80: break;
          case 13:
            { return symbol(ParserSym.DOSPUNTOS, yytext());
            }
          // fall through
          case 81: break;
          case 14:
            { return symbol(ParserSym.MENOR, yytext());
            }
          // fall through
          case 82: break;
          case 15:
            { return symbol(ParserSym.ASG, yytext());
            }
          // fall through
          case 83: break;
          case 16:
            { return symbol(ParserSym.MAYOR, yytext());
            }
          // fall through
          case 84: break;
          case 17:
            { return symbol(ParserSym.ID, yytext());
            }
          // fall through
          case 85: break;
          case 18:
            { return symbol(ParserSym.NOT, yytext());
            }
          // fall through
          case 86: break;
          case 19:
            { return symbol(ParserSym.DESIGUAL, yytext());
            }
          // fall through
          case 87: break;
          case 20:
            { return symbol(ParserSym.TEXTO, yytext());
            }
          // fall through
          case 88: break;
          case 21:
            { return symbol(ParserSym.ASG_MOD, yytext());
            }
          // fall through
          case 89: break;
          case 22:
            { return symbol(ParserSym.ASG_NUL, yytext());
            }
          // fall through
          case 90: break;
          case 23:
            { return symbol(ParserSym.INC, yytext());
            }
          // fall through
          case 91: break;
          case 24:
            { return symbol(ParserSym.ASG_SUMA, yytext());
            }
          // fall through
          case 92: break;
          case 25:
            { return symbol(ParserSym.DEC, yytext());
            }
          // fall through
          case 93: break;
          case 26:
            { return symbol(ParserSym.ASG_RESTA, yytext());
            }
          // fall through
          case 94: break;
          case 27:
            { return symbol(ParserSym.ASG_DIV, yytext());
            }
          // fall through
          case 95: break;
          case 28:
            { return symbol(ParserSym.DECIMAL, Float.valueOf(yytext()));
            }
          // fall through
          case 96: break;
          case 29:
            { return symbol(ParserSym.MEN_IG, yytext());
            }
          // fall through
          case 97: break;
          case 30:
            { return symbol(ParserSym.IGUAL, yytext());
            }
          // fall through
          case 98: break;
          case 31:
            { return symbol(ParserSym.MAY_IG, yytext());
            }
          // fall through
          case 99: break;
          case 32:
            { return symbol(ParserSym.R_SI, yytext());
            }
          // fall through
          case 100: break;
          case 33:
            { return symbol(ParserSym.SIMBOLO, yytext());
            }
          // fall through
          case 101: break;
          case 34:
            { return symbol(ParserSym.OR, yytext());
            }
          // fall through
          case 102: break;
          case 35:
            { return symbol(ParserSym.AND, yytext());
            }
          // fall through
          case 103: break;
          case 36:
            { return symbol(ParserSym.R_FIN, yytext());
            }
          // fall through
          case 104: break;
          case 37:
            { return symbol(ParserSym.R_RFC, yytext());
            }
          // fall through
          case 105: break;
          case 38:
            { return symbol(ParserSym.R_COMO, yytext());
            }
          // fall through
          case 106: break;
          case 39:
            { return symbol(ParserSym.R_CURP, yytext());
            }
          // fall through
          case 107: break;
          case 40:
            { return symbol(ParserSym.R_HORA, yytext());
            }
          // fall through
          case 108: break;
          case 41:
            { return symbol(ParserSym.R_PARA, yytext());
            }
          // fall through
          case 109: break;
          case 42:
            { return symbol(ParserSym.R_SINO, yytext());
            }
          // fall through
          case 110: break;
          case 43:
            { return symbol(ParserSym.FALSO, yytext());
            }
          // fall through
          case 111: break;
          case 44:
            { return symbol(ParserSym.R_FECHA, yytext());
            }
          // fall through
          case 112: break;
          case 45:
            { return symbol(ParserSym.R_TEXTO, yytext());
            }
          // fall through
          case 113: break;
          case 46:
            { return symbol(ParserSym.R_ENTERO, yytext());
            }
          // fall through
          case 114: break;
          case 47:
            { return symbol(ParserSym.R_INICIO, yytext());
            }
          // fall through
          case 115: break;
          case 48:
            { return symbol(ParserSym.R_LOGICO, yytext());
            }
          // fall through
          case 116: break;
          case 49:
            { return symbol(ParserSym.R_ROMPER, yytext());
            }
          // fall through
          case 117: break;
          case 50:
            { return symbol(ParserSym.R_DECIMAL, yytext());
            }
          // fall through
          case 118: break;
          case 51:
            { return symbol(ParserSym.R_FUNC, yytext());
            }
          // fall through
          case 119: break;
          case 52:
            { return symbol(ParserSym.R_SIMBOLO, yytext());
            }
          // fall through
          case 120: break;
          case 53:
            { return symbol(ParserSym.HORA, yytext());
            }
          // fall through
          case 121: break;
          case 54:
            { return symbol(ParserSym.R_DEVOLVER, yytext());
            }
          // fall through
          case 122: break;
          case 55:
            { return symbol(ParserSym.R_ENTONCES, yytext());
            }
          // fall through
          case 123: break;
          case 56:
            { return symbol(ParserSym.R_MIENTRAS, yytext());
            }
          // fall through
          case 124: break;
          case 57:
            { return symbol(ParserSym.R_VAR, yytext());
            }
          // fall through
          case 125: break;
          case 58:
            { return symbol(ParserSym.R_FUNCS, yytext());
            }
          // fall through
          case 126: break;
          case 59:
            { return symbol(ParserSym.R_VARS, yytext());
            }
          // fall through
          case 127: break;
          case 60:
            { return symbol(ParserSym.VERDADERO, yytext());
            }
          // fall through
          case 128: break;
          case 61:
            { return symbol(ParserSym.FECHA, yytext());
            }
          // fall through
          case 129: break;
          case 62:
            { return symbol(ParserSym.RFC, yytext());
            }
          // fall through
          case 130: break;
          case 63:
            { return symbol(ParserSym.R_FECHAHORA, yytext());
            }
          // fall through
          case 131: break;
          case 64:
            { return symbol(ParserSym.R_PROC, yytext());
            }
          // fall through
          case 132: break;
          case 65:
            { return symbol(ParserSym.R_PROCS, yytext());
            }
          // fall through
          case 133: break;
          case 66:
            { return symbol(ParserSym.R_PRINCIPAL, yytext());
            }
          // fall through
          case 134: break;
          case 67:
            { return symbol(ParserSym.CURP, yytext());
            }
          // fall through
          case 135: break;
          case 68:
            { return symbol(ParserSym.FECHAHORA, yytext());
            }
          // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
